{"version":3,"sources":["player.js"],"names":["pos","k","b","node","length","can_roation","can_rotaion_num","t","pi","cc","Class","extends","Component","properties","top","Node","mid","ground","start","Collision","console","log","i","Physics","director","getPhysicsManager","find","position","rotation","y","x","update","dt","position_ball","Vec2","now_x","now_y","getComponent","end","scense","loadScene","broad_node","rot","name"],"mappings":"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","file":"player.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\nvar pos = [];\r\nvar k =[];\r\nvar b=[];\r\nvar node = [];\r\nvar length = 100;\r\nvar can_roation = 0;\r\nvar can_rotaion_num = null;\r\nvar t = 0;\r\nvar pi = 3.1415926;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        top: cc.Node,\r\n        mid: cc.Node,\r\n        ground: cc.Node\r\n    },\r\n    start() {\r\n        this.Collision();\r\n        console.log(\"start\");\r\n    },\r\n\r\n    Collision: function () {\r\n        var i = 0;\r\n        //Physics.rayCast(p1, p2, type);\r\n\r\n        //get p1\r\n        //cc.log(this.node.getLocation());\r\n        var Physics = cc.director.getPhysicsManager();\r\n\r\n        // var position_ball = new cc.Vec2(this.node.position.x, this.node.position.y + 60);\r\n        // var position_ground = new cc.Vec2(position_ball.x, 0);\r\n        // cc.log(position_ball.x, position_ball.y);\r\n        // cc.log(position_ground.x, position_ground.y);\r\n\r\n        node[0] = \"Canvas/background/npc/top\";\r\n        pos[0] = cc.find(node[0]).position;\r\n        k[0] = (-cc.find(node[0]).rotation / 180) * pi;\r\n        b[0] = pos[0].y - k[0]*pos[0].x;\r\n\r\n        node[1] = \"Canvas/background/npc/mid\";\r\n        pos[1] = cc.find(node[1]).position;\r\n        k[1] = (-cc.find(node[1]).rotation / 180) * pi;\r\n        b[1] = pos[1].y - k[1]*pos[1].x;\r\n\r\n        node[2] = \"Canvas/background/npc/ground\";\r\n        pos[2] = cc.find(node[2]).position;\r\n        k[2] = (-cc.find(node[2]).rotation / 180) * pi;\r\n        b[2] = pos[2].y - k[2]*pos[2].x;\r\n\r\n        cc.log(pos);\r\n    },\r\n    update(dt) {\r\n        var position_ball = new cc.Vec2(this.node.position.x, this.node.position.y);\r\n        let now_x = position_ball.x;\r\n        let now_y = position_ball.y;\r\n        //y=kx+b\r\n        //cc.log(cc.find('Canvas/background/end/end_door').getComponent('end_control').end);\r\n        \r\n        //end\r\n        if(now_y < -350 && cc.find('Canvas/background/end/end_door').getComponent('end_control').end == 0){\r\n        \tcc.find('Canvas/background/end/end_door').getComponent('end_control').scense = 1;\r\n        \tcc.director.loadScene('gameOver');\r\n        }\r\n\r\n        //rotation\r\n        if (can_roation == 0) {\r\n            for (let i = 0; i < pos.length; i++) {\r\n                if (now_x > pos[i].x - length - 15\r\n                    && now_x < pos[i].x + length + 15\r\n                    && now_y > now_x * k[i] + b[i]) {\r\n                    can_roation = 1;\r\n                    can_rotaion_num = i;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (can_roation == 1 && t == 0) {\r\n            let broad_node = cc.find(node[can_rotaion_num]);\r\n            broad_node.getComponent('control').rot = 1;\r\n            console.log(broad_node.name+\" 111\");\r\n            t = 1;\r\n        }else if(can_roation == 1 && t == 1){\r\n                if (!(now_x > pos[can_rotaion_num].x - length - 15\r\n                    && now_x < pos[can_rotaion_num].x + length + 15\r\n                    && now_y > now_x * k[can_rotaion_num] + b[can_rotaion_num])) {\r\n                //stop roation\r\n                let broad_node = cc.find(node[can_rotaion_num]);\r\n                broad_node.getComponent('control').rot = 0;\r\n                //console.log(broad_node.name+\" 000\");\r\n\r\n                can_roation = 0;\r\n                can_rotaion_num = null;\r\n                t = 0;\r\n            }\r\n        }\r\n        k[0] = (-cc.find(node[0]).rotation / 180) * pi;\r\n        b[0] = pos[0].y - k[0]*pos[0].x;\r\n        k[1] = (-cc.find(node[1]).rotation / 180) * pi;\r\n        b[1] = pos[1].y - k[1]*pos[1].x;\r\n        k[2] = (-cc.find(node[2]).rotation / 180) * pi;\r\n        b[2] = pos[2].y - k[2]*pos[2].x;\r\n    }\r\n});"]}